{"version":3,"sources":["webpack:///./node_modules/core-js/modules/_string-html.js","webpack:///./node_modules/core-js/modules/es6.string.sub.js","webpack:///./src/components/spacedisplay.js","webpack:///./src/classes/gravity-simulation.js","webpack:///./src/classes/simulator.js","webpack:///./src/classes/vectorary.js","webpack:///./src/classes/neural-network.js","webpack:///./src/classes/ddgd.js","webpack:///./src/pages/ai.js"],"names":["$export","fails","defined","quot","createHTML","string","tag","attribute","value","S","String","p1","replace","module","exports","NAME","exec","O","P","F","test","toLowerCase","split","length","this","SpaceDisplay","props","canvasRef","React","createRef","width","centerX","height","centerY","antiMag","scale","Math","pow","context","undefined","componentDidMount","canvas","current","getContext","renderCanvas","addEventListener","e","preventDefault","deltaY","componentDidUpdate","prevProps","cleanCanvas","fillBackground","circles","forEach","circle","drawCircle","position","radius","focusedOnCircle","isMagicEnabled","fuel","aX","magicAccelerationDirection","aY","aLength","drawArrow","atan2","drawReward","fuelPercentage","drawFuel","fillStyle","fillRect","resetContext","percentage","lineWidth","strokeRect","center","offset","beginPath","arc","PI","stroke","rotate","points","rotated0","moveTo","p","rotatedP","lineTo","theta","vector","sinT","sin","cosT","cos","font","fillText","reward","strokeStyle","setLineDash","clearRect","render","ref","style","border","Component","GravitySimulation","mf","DefaultMathFunction","bodies","GRAVITY_CONSTANT","addBody","body","push","removeBody","index","indexOf","splice","calcAccelFromPos","G","M","R1","R2","dR","sub","RDiffMag","sqrt","lengthSquared","nullVector","D","mulScalar","calcAccelForObject","R","accel","magicAcceleration","normalize","magicAccelerationMagnitude","add","otherBody","mass","multiAdd","r","i","arguments","updateTime","dt","V","velocity","A","halfDiffT","KaV","KaA","KbR","KbV","KbA","KcR","KcV","KcA","KdR","KdV","KdA","vfV","vfA","detectCollision","some","dVector","dSquared","sumOfRadii","a","b","s","dot","Simulator","massToRadius","c","timestep","sim","getInitialState","getState","stepSimulation","isColliding","doAction","state","action","setState","isPropulsing","propulsionX","propulsionY","dVX","dVY","simSpaceToNnSpace","aVX","aVY","aR","bX","bY","bVX","bVY","bR","nnSpaceToSimSpace","radiusToMass","Vectorary","arrayA","arrayB","Error","acc","scalar","array","arrayClone","slice","arrayAClone","schur","init","size","initialValue","zeroes","ones","NeuralNetwork","layoutArray","dontInit","layerCount","inputSize","outputSize","layers","l","prevLayerSize","Layer","process","inputArray","latestInputArray","currentData","gradientWrtNthsInputAtState","nArray","rightDeltaArray","backward","weights","map","w","n","reduce","d","sum","learn","alpha","errorArray","leftAArray","update","lerp","towardNn","tau","clone","nnClone","inputCount","neuronCount","isOutput","neurons","newNeuron","Neuron","setLinearActivation","neuron","rightWeightMatrix","deltaArray","delta","dz","towardLayer","layerClone","random","bias","isLinear","z","tanh","dtanh","gradientForward","rightWeights","ad","input","exp","towardNeuron","neuronClone","Ddgd","ddgdBuilder","critic","criticLayout","targetCritic","actor","actorLayout","targetActor","getInitialStateFunc","doActionFunc","actionDimension","criticActionIndices","Array","keys","replayBuffer","ReplayBuffer","replayMaxLength","minibatchesSize","gamma","initializeExhibition","exhibitState","step","tmp","nextState","onTimeStep","callback","onExploreRep","exploreRep","noise","OUNoise","reset","currentState","t","explore","sample","minibatchSize","minibatch","targetActorNextAction","nextTargetQ","y","q","newAction","qWrtA","gradientWrtNthInputAtState","fromState","rep","policyAction","dAction","nextValue","tryAction","maxLength","buffer","isFull","shift","samples","floor","sigma","dimensionCount","walk","dstate","RandomGen","normalUnitCombination","DdgdBuilder","setCriticLayout","setActorLayout","setGetInitialStateFunc","setDoActionFunc","setReplayMaxLength","setMiniBatchesSize","setGamma","setAlpha","setTau","build","normalUnit","log","newTheta","j","Ai","train","lengthRef","exploration","explorationRef","ddgd","displayRef","simulator","bind","console","exhibitInterval","setInterval","forceUpdate","type","defaultValue","onClick"],"mappings":"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","file":"component---src-pages-ai-js-15bf798329a8d7202e54.js","sourcesContent":["var $export = require('./_export');\nvar fails = require('./_fails');\nvar defined = require('./_defined');\nvar quot = /\"/g;\n// B.2.3.2.1 CreateHTML(string, tag, attribute, value)\nvar createHTML = function (string, tag, attribute, value) {\n  var S = String(defined(string));\n  var p1 = '<' + tag;\n  if (attribute !== '') p1 += ' ' + attribute + '=\"' + String(value).replace(quot, '&quot;') + '\"';\n  return p1 + '>' + S + '</' + tag + '>';\n};\nmodule.exports = function (NAME, exec) {\n  var O = {};\n  O[NAME] = exec(createHTML);\n  $export($export.P + $export.F * fails(function () {\n    var test = ''[NAME]('\"');\n    return test !== test.toLowerCase() || test.split('\"').length > 3;\n  }), 'String', O);\n};\n","'use strict';\n// B.2.3.13 String.prototype.sub()\nrequire('./_string-html')('sub', function (createHTML) {\n  return function sub() {\n    return createHTML(this, 'sub', '', '');\n  };\n});\n","import React from \"react\";\n\nclass SpaceDisplay extends React.Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = React.createRef();\n    this.width = 1300;\n    this.centerX = this.width / 2;\n    this.height = 600;\n    this.centerY = this.height / 2;\n    this.antiMag = 1.5;\n    this.scale = 500.0 / Math.pow(this.antiMag, 6);\n    this.context = undefined;\n  }\n\n  componentDidMount() {\n    this.canvas = this.canvasRef.current;\n    this.context = this.canvas.getContext(\"2d\");\n    this.renderCanvas();\n\n    this.canvas.addEventListener('wheel', e => {\n      e.preventDefault();\n      this.antiMag += e.deltaY * 0.02;\n      if (this.antiMag < 1.0) this.antiMag = 1.0;\n      this.scale = 500.0 / Math.pow(this.antiMag, 6);\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    this.canvas = this.canvasRef.current;\n    this.context = this.canvas.getContext(\"2d\");\n    this.renderCanvas();\n  }\n\n  renderCanvas() {\n    this.cleanCanvas();\n    this.fillBackground();\n    if (this.props.circles) {\n      this.props.circles.forEach((circle) => {\n        this.drawCircle(circle.position, circle.radius, this.props.focusedOnCircle.position);\n        if (circle.isMagicEnabled && circle.fuel > 0) {\n          const aX = circle.magicAccelerationDirection[0];\n          const aY = circle.magicAccelerationDirection[1];\n          const aLength = Math.pow(aX * aX + aY * aY, 1/2);\n          this.drawArrow(Math.atan2(aY, aX), [(aX / aLength) * 100.0, (-aY / aLength) * 100.0]);\n        }\n      });\n    }\n    this.drawReward();\n    if (this.props.fuelPercentage) {\n      this.drawFuel(this.props.fuelPercentage);\n    }\n  }\n\n  fillBackground() {\n    this.context.fillStyle = '#16122b';\n    this.context.fillRect(0, 0, this.width, this.height);\n    this.resetContext();\n  }\n\n  drawFuel(percentage) {\n    this.context.lineWidth = 3.0;\n    this.context.strokeRect(50, 50, 20, 100);\n    this.context.fillRect(50, 150, 20, -percentage);\n    this.resetContext();\n  }\n\n  drawCircle(center, radius, offset) {\n    this.context.beginPath();\n    this.context.arc(((center[0] - offset[0]) * this.scale) + this.centerX, (-(center[1] - offset[1]) * this.scale) + this.centerY, radius * this.scale, 0, 2 * Math.PI);\n    this.context.stroke();\n  }\n\n  drawArrow(rotate, offset) {\n    const points = [\n      [-50, -10],\n      [0, -10],\n      [0, -30],\n      [20, 0],\n      [0, 30],\n      [0, 10],\n      [-50, 10],\n      [-50, -10]\n    ];\n    this.context.beginPath();\n    const rotated0 = this.rotate(rotate, points[0]);\n    this.context.moveTo(rotated0[0] + offset[0] + this.centerX, -rotated0[1] + offset[1] + this.centerY);\n    for (let p = 1; p < points.length; p++) {\n      const rotatedP = this.rotate(rotate, points[p]);\n      this.context.lineTo(rotatedP[0] + offset[0] + this.centerX, -rotatedP[1] + offset[1] + this.centerY);\n    }\n    this.context.stroke();\n  }\n\n  rotate(theta, vector) {\n    const sinT = Math.sin(theta);\n    const cosT = Math.cos(theta);\n    const newX = (vector[0] * cosT) - (vector[1] * sinT);\n    const newY = (vector[0] * sinT) + (vector[1] * cosT);\n    return [newX, newY];\n  }\n\n  drawReward() {\n    this.context.font = '20px sans-serif';\n    this.context.fillText(\"reward \" + this.props.reward, 20, 500);\n  }\n\n  resetContext() {\n    this.context.lineWidth = 2.0;\n    this.context.strokeStyle = 'grey';\n    this.context.fillStyle = 'grey';\n    this.context.setLineDash([]);\n  }\n\n  cleanCanvas() {\n    this.context.clearRect(0, 0, this.width, this.height);\n  }\n\n  render() {\n    return (\n      <canvas ref={this.canvasRef} height={this.height} width={this.width} style={{ border: `solid` }}>\n      </canvas>\n    )\n  }\n}\n\nexport default SpaceDisplay;\n","class GravitySimulation {\n\n  constructor(mf = new DefaultMathFunction()) {\n    this.mf = mf;\n    this.bodies = [];\n    this.GRAVITY_CONSTANT = 1; // Nm2/kg2\n  }\n\n  addBody(body) {\n    this.bodies.push(body);\n  };\t\n\n  removeBody(body) {\n    const index = this.bodies.indexOf(body);\n    this.bodies.splice(index, 1);\n  };\n\n  calcAccelFromPos(G, M, R1, R2) {\n    const dR = this.mf.sub(R1, R2);\n    const RDiffMag = Math.sqrt(this.mf.lengthSquared(dR));\n    if(RDiffMag === 0.0) {\n      return this.mf.nullVector();\n    }\n    const D = G * M / (RDiffMag * RDiffMag * RDiffMag);\n    return this.mf.mulScalar(dR, D);\n  };\n\n  calcAccelForObject(body, G, R) {\n    let accel = this.mf.nullVector();\n\n    // add acceleration from booster\n    if (body.isMagicEnabled && body.fuel > 0.0) {\n      const magicAcceleration = this.mf.mulScalar(this.mf.normalize(body.magicAccelerationDirection), body.magicAccelerationMagnitude);\n      accel = this.mf.add(accel, magicAcceleration);\n    }\n\n    this.bodies.forEach((otherBody) => {\n      if(otherBody === body)\n        return;\n      accel = this.mf.add(accel, this.calcAccelFromPos(G, otherBody.mass, otherBody.position, R));\n    });\n    return accel;\n  };\n\n  multiAdd() {\n    let r = this.mf.nullVector();\n    for(let i=0;i<arguments.length;i++) {\n      r = this.mf.add(r, arguments[i]);\n    }\n    return r;\n  };\n\n  updateTime(dt) {\n    this.bodies.forEach((otherBody) => {\n      if (otherBody.isMagicEnabled && otherBody.fuel > 0.0) {\n        otherBody.fuel -= dt;\n        if (otherBody.fuel < 0) {\n          otherBody.fuel = 0.0;\n        }\n      }\n      // Integrate via Runge-Kutta...\n      let R = otherBody.position;\n      let V = otherBody.velocity;\n      const A = this.calcAccelForObject(otherBody, this.GRAVITY_CONSTANT, R);\n\n      const halfDiffT = 0.5 * dt;\n\n      const KaV = V;\n      const KaA = A;\n\n      const KbR = this.mf.add(R, this.mf.mulScalar(KaV, halfDiffT));\n      const KbV = this.mf.add(V, this.mf.mulScalar(KaA, halfDiffT));\n      const KbA = this.calcAccelForObject(otherBody, this.GRAVITY_CONSTANT, KbR);\n\n      const KcR = this.mf.add(R, this.mf.mulScalar(KbV, halfDiffT));\n      const KcV = this.mf.add(V, this.mf.mulScalar(KbA, halfDiffT));\n      const KcA = this.calcAccelForObject(otherBody, this.GRAVITY_CONSTANT, KcR);\n\n      const KdR = this.mf.add(R, this.mf.mulScalar(KcV, dt));\n      const KdV = this.mf.add(V, this.mf.mulScalar(KcA, dt));\n      const KdA = this.calcAccelForObject(otherBody, this.GRAVITY_CONSTANT, KdR);\n\n      const vfV = this.mf.mulScalar(this.multiAdd(KaV, this.mf.mulScalar(KbV, 2.0), this.mf.mulScalar(KcV, 2.0), KdV), 1.0/6.0);\n      const vfA = this.mf.mulScalar(this.multiAdd(KaA, this.mf.mulScalar(KbA, 2.0), this.mf.mulScalar(KcA, 2.0), KdA), 1.0/6.0);\n\n      R = this.mf.add(R, this.mf.mulScalar(vfV, dt));\n      V = this.mf.add(V, this.mf.mulScalar(vfA, dt));\n\n      otherBody.position = R;\n      otherBody.velocity = V;\n    });\n  };\n\n  detectCollision(body) {\n    // if exists colliding body ∈ bodies\n    return this.bodies.some((otherBody) => {\n      if(otherBody === body) {\n        return false;\n      }\n      const dVector = this.mf.sub(otherBody.position, body.position);\n      const dSquared = this.mf.lengthSquared(dVector);\n      const sumOfRadii = body.radius + otherBody.radius;\n      // check if d < r + R -> colliding\n      const d = Math.pow(dSquared, 1/2);\n      if (d < sumOfRadii) return true;\n\n      return false;\n    });\n  }\n}\n\nclass DefaultMathFunction {\n  nullVector() {\n    return [0,0];\n  }\n\n  add(a, b) {\n    return [\n      a[0] + b[0],\n      a[1] + b[1]\n    ];\n  }\n\n  sub(a, b) {\n    return [\n      a[0] - b[0],\n      a[1] - b[1]\n    ];\n  }\n\n  mulScalar(a, s) {\n    return [\n      a[0] * s,\n      a[1] * s\n    ];\n  }\n\n  dot(a, b) {\n    return a[0] * b[0] + a[1] * b[1];\n  }\n\n  lengthSquared(a) {\n    return a[0]*a[0] + a[1]*a[1];\n  }\n\n  length(a) {\n    return Math.pow(this.lengthSquared(a), 1/2);\n  }\n\n  normalize(a) {\n    return this.mulScalar(a, 1 / this.length(a));\n  }\n}\n\nexport default GravitySimulation;\n","import GravitySimulation from \"./gravity-simulation\";\n\nclass Simulator {\n  constructor() {\n    this.a = {\n      position: [1000.0, 1000.0],\n      velocity: [6.0, -6.0],\n      radius: Simulator.massToRadius(1000.0),\n      mass: 1000.0\n    }\n    this.b = {\n      position: [0.0, 0.0],\n      velocity: [0.0, 0.0],\n      radius: Simulator.massToRadius(100000.0),\n      mass: 100000.0\n    }\n    this.c = {\n      position: [300.0, 300.0],\n      velocity: [11.0, -11.0],\n      radius: Simulator.massToRadius(0.001),\n      mass: 0.001,\n      fuel: 100.0,\n      isMagicEnabled: false,\n      magicAccelerationDirection: [0.0, 0.0],\n      magicAccelerationMagnitude: 0.1\n    }\n    this.timestep = 5.0;\n    this.sim = new GravitySimulation();\n    this.sim.addBody(this.a);\n    this.sim.addBody(this.b);\n    this.sim.addBody(this.c);\n  }\n\n  getInitialState() {\n    this.a.position = [1000.0, 1000.0];\n    this.a.velocity = [6.0, -6.0];\n    this.a.radius = Simulator.massToRadius(1000.0);\n    this.a.mass = 1000.0;\n    this.b.position = [0.0, 0.0];\n    this.b.velocity = [0.0, 0.0];\n    this.b.radius = Simulator.massToRadius(100000.0);\n    this.b.mass = 100000.0;\n    this.c.position = [300.0, 300.0];\n    this.c.velocity = [11.0, -11.0];\n    this.c.radius = Simulator.massToRadius(0.001);\n    this.c.mass = 0.001;\n    this.c.fuel = 100.0;\n    this.c.magicAccelerationMagnitude = 0.1;\n    return this.getState();\n  }\n\n  stepSimulation() {\n    this.sim.updateTime(this.timestep);\n    this.isColliding = this.sim.detectCollision(this.c);\n  }\n\n  doAction(state, action) {\n    this.setState(state);\n    const isPropulsing = action[0] > 0;\n    const propulsionX = action[1];\n    const propulsionY = action[2];\n    this.c.magicAccelerationDirection = [propulsionX, propulsionY];\n    this.c.isMagicEnabled = isPropulsing;\n    this.stepSimulation();\n    let reward = 0.0;\n    if (this.isColliding) {\n      reward = -5000000000.0;\n    } else {\n      const dVX = this.b.velocity[0] - this.c.velocity[0];\n      const dVY = this.b.velocity[1] - this.c.velocity[1];\n      const cToBX = this.b.position[0] - this.c.position[0];\n      const cToBY = this.b.position[1] - this.c.position[1];\n      const vAway = (cToBX * dVX) + (cToBY * dVY);\n      reward = vAway;\n    }\n    const nextState = this.getState();\n    return [reward, nextState];\n  }\n\n  getState() {\n    const aX = Simulator.simSpaceToNnSpace(this.a.position[0] - this.c.position[0]);\n    const aY = Simulator.simSpaceToNnSpace(this.a.position[1] - this.c.position[1]);\n    const aVX = Simulator.simSpaceToNnSpace(this.a.velocity[0] - this.c.velocity[0]);\n    const aVY = Simulator.simSpaceToNnSpace(this.a.velocity[1] - this.c.velocity[1]);\n    const aR = Simulator.simSpaceToNnSpace(this.a.radius);\n    const bX = Simulator.simSpaceToNnSpace(this.b.position[0] - this.c.position[0]);\n    const bY = Simulator.simSpaceToNnSpace(this.b.position[1] - this.c.position[1]);\n    const bVX = Simulator.simSpaceToNnSpace(this.b.velocity[0] - this.c.velocity[0]);\n    const bVY = Simulator.simSpaceToNnSpace(this.b.velocity[1] - this.c.velocity[1]);\n    const bR = Simulator.simSpaceToNnSpace(this.b.radius);\n    const fuel = this.c.fuel / 100.0;\n    return [aX, aY, aVX, aVY, aR, bX, bY, bVX, bVY, bR, fuel];\n  }\n\n  setState(state) {\n    const aX = state[0];\n    const aY = state[1];\n    const aVX = state[2];\n    const aVY = state[3];\n    const aR = state[4];\n    const bX = state[5];\n    const bY = state[6];\n    const bVX = state[7];\n    const bVY = state[8];\n    const bR = state[9];\n    const fuel = state[10];\n    this.a.position[0] = Simulator.nnSpaceToSimSpace(aX);\n    this.a.position[1] = Simulator.nnSpaceToSimSpace(aY);\n    this.a.velocity[0] = Simulator.nnSpaceToSimSpace(aVX);\n    this.a.velocity[1] = Simulator.nnSpaceToSimSpace(aVY);\n    this.a.radius = Simulator.nnSpaceToSimSpace(aR);\n    this.a.mass = Simulator.radiusToMass(this.a.radius);\n    this.b.position[0] = Simulator.nnSpaceToSimSpace(bX);\n    this.b.position[1] = Simulator.nnSpaceToSimSpace(bY);\n    this.b.velocity[0] = Simulator.nnSpaceToSimSpace(bVX);\n    this.b.velocity[1] = Simulator.nnSpaceToSimSpace(bVY);\n    this.b.radius = Simulator.nnSpaceToSimSpace(bR);\n    this.b.mass = Simulator.radiusToMass(this.b.radius);\n    this.c.fuel = fuel * 100.0;\n    this.c.position = [0.0, 0.0];\n    this.c.velocity = [0.0, 0.0];\n  }\n\n  static massToRadius(value) {\n    return Math.pow(value * 500.0, 1/3);\n  }\n\n  static radiusToMass(value) {\n    return Math.pow(value, 3) / 500.0;\n  }\n\n  static simSpaceToNnSpace(value) {\n    return value / 1000.0;\n  }\n\n  static nnSpaceToSimSpace(value) {\n    return value * 1000.0;\n  }\n}\n\nexport default Simulator;\n","class Vectorary {\n  static dot(arrayA, arrayB) {\n    if (arrayA.length !== arrayB.length) {\n      throw new Error(\"unequal lengths\");\n    }\n    let acc = 0;\n    for (let i = 0; i < arrayA.length; i++) {\n      acc += arrayA[i] * arrayB[i];\n    }\n    return acc;\n  }\n\n  static scale(scalar, array) {\n    const arrayClone = array.slice();\n    for (let i = 0; i < arrayClone.length; i++) {\n      arrayClone[i] *= scalar;\n    }\n    return arrayClone;\n  }\n\n  static add(arrayA, arrayB) {\n    if (arrayA.length !== arrayB.length) {\n      throw new Error(\"unequal lengths\");\n    }\n    const arrayAClone = arrayA.slice();\n    for (let i = 0; i < arrayAClone.length; i++) {\n      arrayAClone[i] += arrayB[i];\n    }\n    return arrayAClone;\n  }\n\n  static sub(arrayA, arrayB) {\n    if (arrayA.length !== arrayB.length) {\n      throw new Error(\"unequal lengths\");\n    }\n    const arrayAClone = arrayA.slice();\n    for (let i = 0; i < arrayAClone.length; i++) {\n      arrayAClone[i] -= arrayB[i];\n    }\n    return arrayAClone;\n  }\n\n  static schur(arrayA, arrayB) {\n    if (arrayA.length !== arrayB.length) {\n      throw new Error(\"unequal lengths\");\n    }\n    const arrayAClone = arrayA.slice();\n    for (let i = 0; i < arrayAClone.length; i++) {\n      arrayAClone[i] *= arrayB[i];\n    }\n    return arrayAClone;\n  }\n\n  static init(size, initialValue) {\n    const array = [];\n    for (let i = 0; i < size; i++) {\n      array.push(initialValue);\n    }\n    return array;\n  }\n\n  static zeroes(size) {\n    return Vectorary.init(size, 0.0);\n  }\n\n  static ones(size) {\n    return Vectorary.init(size, 1.0);\n  }\n}\n\nexport default Vectorary;\n","import Vectorary from \"./vectorary\"\n\nclass NeuralNetwork {\n  /* [2, 2] 2 input neurons & 2 output neurons\n   * [2] 2 neurons but the output is the same as the input\n   * [3, 2, 1] 3 input neurons & 1 hidden layer of 2 neurons & 1 output neuron\n   */\n  constructor(layoutArray, dontInit = false) {\n    if (!dontInit) {\n      this.layoutArray = layoutArray;\n      this.layerCount = this.layoutArray.length - 1;\n      this.inputSize = this.layoutArray[0];\n      this.outputSize = this.layoutArray[this.layerCount - 1];\n      this.layers = [];\n      for (let l = 0; l < this.layerCount; l++) {\n        const prevLayerSize = this.layoutArray[l];\n        if (l < this.layerCount - 1) {\n          this.layers.push(new Layer(prevLayerSize, this.layoutArray[l+1]));\n        } else {\n          this.layers.push(new Layer(prevLayerSize, this.layoutArray[l+1], true));\n        }\n      }\n    }\n  }\n\n  process(inputArray) {\n    if (inputArray.length !== this.inputSize) {\n      throw new Error(\"wrong input size\");\n    }\n    this.latestInputArray = inputArray;\n    let currentData = inputArray.slice();\n    for (let l = 0; l < this.layerCount; l++) {\n      currentData = this.layers[l].process(currentData);\n    }\n    return currentData;\n  }\n\n  gradientWrtNthsInputAtState(nArray, state) {\n    if (this.outputSize !== 1) {\n      throw new Error(\"gradientWrtNthInput function can only be used on 1 output network\");\n    }\n\n    this.process(state);\n   \n    let rightDeltaArray = [1];\n    for (let l = this.layerCount - 1; l >= 0; l--) {\n      if (l === this.layerCount - 1) { // first loop\n        rightDeltaArray = this.layers[l].backward(rightDeltaArray);\n      } else {\n        rightDeltaArray = this.layers[l].backward(rightDeltaArray, this.layers[l+1].weights());\n      }\n    }\n    const nDeltas = this.layers[0].weights().map(w => {\n      const acc = [];\n      for (let n = 0; n < nArray.length; n++) {\n        acc.push(this.state[n] * w[n]);\n      }\n      return acc;\n    });\n    return nDeltas.reduce((acc, d) => Vectorary.sum(acc, d));\n  }\n\n  learn(alpha, errorArray) {\n    let rightDeltaArray = errorArray;\n    for (let l = this.layerCount - 1; l >= 0; l--) {\n      if (l === this.layerCount - 1) { // first loop\n        rightDeltaArray = this.layers[l].backward(rightDeltaArray);\n      } else {\n        rightDeltaArray = this.layers[l].backward(rightDeltaArray, this.layers[l+1].weights());\n      }\n    }\n\n    let leftAArray = this.latestInputArray;\n    for (let l = 0; l < this.layerCount; l++) {\n      leftAArray = this.layers[l].update(alpha, leftAArray);\n    }\n  }\n\n  lerp(towardNn, tau) {\n    for (let l = 0; l < this.layerCount; l++) {\n      this.layers[l].lerp(towardNn.layers[l], tau);\n    }\n  }\n\n  clone() {\n    const nnClone = new NeuralNetwork(0, true);\n    nnClone.layers = this.layers.map(l => l.clone());\n    nnClone.layoutArray = this.layoutArray;\n    nnClone.layerCount = this.layerCount;\n    nnClone.inputSize = this.inputSize;\n    nnClone.outputSize = this.outputSize;\n    return nnClone;\n  }\n}\n\nclass Layer {\n  constructor(inputCount, neuronCount, isOutput = false, dontInit = false) {\n    if (!dontInit) {\n      this.neurons = [];\n      this.isOutput = isOutput;\n      for (let n = 0; n < neuronCount; n++) {\n        const newNeuron = new Neuron(inputCount);\n        if (this.isOutput) {\n          newNeuron.setLinearActivation(false);\n        }\n        this.neurons.push(newNeuron);\n      }\n    }\n  }\n\n  process(inputArray) {\n    return this.neurons.map(neuron => neuron.process(inputArray));\n  }\n\n  backward(rightDeltaArray, rightWeightMatrix) {\n    if (this.isOutput) {\n      const deltaArray = [];\n      for (let n = 0; n < this.neurons.length; n++) {\n        this.neurons[n].delta = this.neurons[n].dz * rightDeltaArray[n];\n        deltaArray.push(this.neurons[n].delta);\n      }\n      return deltaArray;\n    }\n    return this.neurons.map((neuron, n) => neuron.backward(rightDeltaArray, rightWeightMatrix.map(w => w[n])));\n  }\n\n  update(alpha, leftAArray) {\n    return this.neurons.map(neuron => neuron.update(alpha, leftAArray));\n  }\n\n  weights() {\n    return this.neurons.map(neuron => neuron.weights);\n  }\n\n  lerp(towardLayer, tau) {\n    for (let n = 0; n < this.neurons.length; n++) {\n      this.neurons[n].lerp(towardLayer.neurons[n], tau);\n    }\n  }\n\n  clone() {\n    const layerClone = new Layer(0, 0, 0, true);\n    layerClone.neurons = this.neurons.map(n => n.clone());\n    return layerClone;\n  }\n}\n\nclass Neuron {\n  constructor(inputSize, dontInit = false) {\n    if (!dontInit) {\n      this.weights = Vectorary.zeroes(inputSize);\n      for (let i = 0; i < inputSize; i++) {\n        this.weights[i] += (Math.random() * 2.0) - 1.0;\n      }\n      this.bias = (Math.random() * 2.0) - 1.0;\n    }\n  }\n\n  setLinearActivation(isLinear) {\n    this.isLinear = isLinear;\n  }\n\n  process(inputArray) {\n    if (inputArray.length !== this.weights.length) {\n      throw new Error(\"wrong input size\");\n    }\n    this.z = Vectorary.dot(inputArray, this.weights) + this.bias;\n    if (this.isLinear) {\n      this.a = this.z;\n      this.dz = 1.0;\n    } else {\n      this.a = this.tanh(this.z);\n      this.dz = this.dtanh(this.z);\n    }\n    return this.a;\n  }\n\n  gradientForward(leftAArray) {\n    return Vectorary.scale(this.delta, leftAArray);\n  }\n\n  backward(rightDeltaArray, rightWeights) {\n    this.delta = Vectorary.dot(rightDeltaArray, rightWeights) * this.dz;\n    return this.delta;\n  }\n\n  update(alpha, leftAArray) {\n    const ad = Vectorary.scale(this.delta, leftAArray);\n    this.weights = Vectorary.sub(this.weights, Vectorary.scale(alpha, ad));\n    this.bias = this.bias - (alpha * this.delta);\n    return this.a;\n  }\n\n  tanh(input) {\n    return (2.0 / (1.0 + Math.exp(-2.0 * input))) - 1.0;\n  }\n\n  dtanh(input) {\n    return 4 / Math.pow(Math.exp(-input) + Math.exp(input), 2);\n  }\n\n  lerp(towardNeuron, tau) {\n    this.bias = towardNeuron.bias - ((1.0 - tau) * this.bias);\n    for (let w = 0; w < this.weights.length; w++) {\n      this.weights[w] = towardNeuron.weights[w] - ((1.0 - tau) * this.weights[w]);\n    }\n  }\n\n  clone() {\n    const neuronClone = new Neuron(0, true);\n    neuronClone.weights = this.weights.slice();\n    neuronClone.bias = this.bias;\n    neuronClone.isLinear = this.isLinear;\n    return neuronClone;\n  }\n}\n\nexport default NeuralNetwork;\n","import NeuralNetwork from \"./neural-network\";\nimport Vectorary from \"./vectorary\";\n\nclass Ddgd {\n  /*constructor params:\n   *    getInitialState() returns state\n   *    doAction(state, action) returns [reward, nextState]\n   */\n  constructor(ddgdBuilder) {\n    this.critic = new NeuralNetwork(ddgdBuilder.criticLayout);\n    this.targetCritic = this.critic.clone();\n    this.actor = new NeuralNetwork(ddgdBuilder.actorLayout);\n    this.targetActor = this.actor.clone();\n    this.getInitialStateFunc = ddgdBuilder.getInitialStateFunc;\n    this.doActionFunc = ddgdBuilder.doActionFunc;\n    this.actionDimension = ddgdBuilder.actorLayout[ddgdBuilder.actorLayout.length - 1];\n    this.criticActionIndices = [...Array(this.actionDimension).keys()]; //[0, 1, .., actionDimension]\n    this.replayBuffer = new ReplayBuffer(ddgdBuilder.replayMaxLength);\n    this.minibatchesSize = ddgdBuilder.minibatchesSize;\n    this.gamma = ddgdBuilder.gamma;\n    this.alpha = ddgdBuilder.alpha;\n    this.tau = ddgdBuilder.tau;\n  }\n\n  initializeExhibition() {\n    this.exhibitState = this.getInitialStateFunc();\n  }\n\n  step() {\n    const tmp = this.doActionFunc(this.exhibitState, this.actor.process(this.exhibitState));\n    const nextState = tmp[1];\n    this.exhibitState = nextState;\n    return tmp[0];\n  }\n  \n  onTimeStep(callback) {\n    this.onTimeStep = callback;\n  }\n\n  onExploreRep(callback) {\n    this.onExploreRep = callback;\n  }\n\n  learn(length, exploreRep) {\n    const noise = new OUNoise(0.15, 0.3, this.actionDimension);\n    noise.reset();\n    let currentState = this.getInitialStateFunc();\n    for (let t = 0; t < length; t++) {\n      this.explore(currentState, exploreRep, noise);\n      this.update();\n      const action = this.actor.process(currentState);\n      const tmp = this.doActionFunc(currentState, action);\n      const reward = tmp[0];\n      const nextState = tmp[1];\n      if (reward === 500.0) {\n        currentState = this.getInitialStateFunc();\n      } else {\n        currentState = nextState;\n      }\n      this.onTimeStep();\n    }\n  }\n\n  update() {\n    const minibatches = this.replayBuffer.sample(this.minibatchSize);\n    minibatches.forEach(minibatch => {\n      const state = minibatch[0];\n      const action = minibatch[1];\n      const reward = minibatch[2];\n      const nextState = minibatch[3];\n      const targetActorNextAction = this.targetActor.process(nextState);\n      const nextTargetQ = this.targetCritic.process([...targetActorNextAction, ...nextState]);\n      const y = reward + (this.gamma * nextTargetQ);\n      const q = this.critic.process([...action, ...state]);\n      this.critic.learn(this.alpha, [q - y]);\n      const newAction = this.actor.process(state);\n      const qWrtA = this.critic.gradientWrtNthInputAtState(this.criticActionIndices, [...newAction, ...state]);\n      this.actor.learn(this.alpha, [qWrtA]);\n    });\n    this.targetActor.lerp(this.actor, this.tau);\n    this.targetCritic.lerp(this.critic, this.tau);\n  }\n\n  explore(fromState, rep, noise) {\n    const policyAction = this.actor.process(fromState);\n    for (let i = 0; i < rep; i++) {\n      const dAction = noise.nextValue();\n      const tryAction = Vectorary.add(policyAction, dAction);\n      const tmp = this.doActionFunc(fromState, tryAction);\n      const reward = tmp[0];\n      const nextState = tmp[1];\n      this.replayBuffer.push(fromState, tryAction, reward, nextState);\n      this.onExploreRep();\n    }\n  }\n}\n\nclass ReplayBuffer {\n  constructor(maxLength) {\n    this.buffer = [];\n    this.maxLength = maxLength;\n    this.isFull = false;\n  }\n\n  push(state, action, reward, nextState) {\n    this.buffer.push([state, action, reward, nextState]);\n    if (!this.isFull) {\n      if (this.buffer.length === this.maxLength) {\n        this.isFull = true;\n      }\n    } else {\n      this.buffer.shift();\n    }\n  }\n\n  sample(size) {\n    const samples = [];\n    for (let i = 0; i < size; i++) {\n      const index = Math.floor(Math.random() * this.buffer.length);\n      samples.push(this.buffer[index]);\n    }\n    return samples;\n  }\n}\n\nclass OUNoise {\n  constructor(theta = 0.15, sigma = 0.3, dimensionCount = 1) {\n    this.dimensionCount = dimensionCount;\n    this.theta = theta;\n    this.sigma = sigma;\n    this.reset();\n  }\n\n  reset() {\n    this.state = Vectorary.zeroes(this.dimensionCount);\n  }\n\n  walk() {\n    const dstate = Vectorary.add(Vectorary.scale(-this.theta, this.state), Vectorary.scale(this.sigma, RandomGen.normalUnitCombination(this.dimensionCount)));\n    this.state = Vectorary.add(this.state, dstate);\n  }\n\n  nextValue() {\n    this.walk();\n    return this.state;\n  }\n}\n\nclass DdgdBuilder {\n  setCriticLayout(value) {\n    this.criticLayout = value;\n  }\n\n  setActorLayout(value) {\n    this.actorLayout = value;\n  }\n\n  setGetInitialStateFunc(value) {\n    this.getInitialStateFunc = value;\n  }\n\n  setDoActionFunc(value) {\n    this.doActionFunc = value;\n  }\n\n  setReplayMaxLength(value) {\n    this.replayMaxLength = value;\n  }\n\n  setMiniBatchesSize(value) {\n    this.minibatchesSize = value;\n  }\n\n  setGamma(value) {\n    this.gamma = value;\n  }\n\n  setAlpha(value) {\n    this.alpha = value;\n  }\n\n  setTau(value) {\n    this.tau = value;\n  }\n\n  build() {\n    return new Ddgd(this);\n  }\n}\n\nclass RandomGen {\n  static normalUnit() {\n    return Math.pow(-2.0 * (Math.log(Math.random)), 0.5);\n  }\n\n  static normalUnitCombination(dimensionCount) {\n    const R = RandomGen.normalUnit();\n    const acc = [R];\n    for (let i = 1; i < dimensionCount; i++) {\n      const newTheta = 2.0 * Math.PI * Math.random;\n      acc.push(R * Math.cos(newTheta));\n      for (let j = 0; j < i; j++) {\n        acc[j] *= Math.sin(newTheta);\n      }\n    }\n    return acc;\n  }\n}\n\nexport default DdgdBuilder;\n","import React from \"react\"\nimport SpaceDisplay from \"../components/spacedisplay\";\nimport Simulator from \"../classes/simulator\"\nimport DdgdBuilder from \"../classes/ddgd\"\n\nclass Ai extends React.Component {\n  constructor(props) {\n    super(props);\n    this.displayRef = React.createRef();\n    this.simulator = new Simulator();\n    const ddgdBuilder = new DdgdBuilder();\n    ddgdBuilder.setCriticLayout([14, 14, 14, 1])\n    ddgdBuilder.setActorLayout([11, 11, 11, 3])\n    ddgdBuilder.setGetInitialStateFunc(this.simulator.getInitialState.bind(this.simulator))\n    ddgdBuilder.setDoActionFunc(this.simulator.doAction.bind(this.simulator))\n    ddgdBuilder.setReplayMaxLength(10000000)\n    ddgdBuilder.setMiniBatchesSize(1000)\n    ddgdBuilder.setGamma(0.5)\n    ddgdBuilder.setAlpha(0.1)\n    ddgdBuilder.setTau(0.01)\n    this.ddgd = ddgdBuilder.build();\n\n    this.lengthRef = React.createRef();\n    this.explorationRef = React.createRef();\n\n    this.state = {reward: 0.0};\n  }\n\n  componentDidMount() {\n    let e = 0;\n    let t = 0;\n    this.ddgd.onTimeStep(() => {\n      t++;\n      e = 0;\n      console.log(\"t \" + t);\n    });\n    this.ddgd.onExploreRep(() => {\n      e++;\n      if (e % 500 === 0) {\n        console.log(\"e \" + e);\n      }\n    });\n    this.ddgd.initializeExhibition();\n    this.exhibitInterval = setInterval(this.step.bind(this), 100);\n  }\n\n  step() {\n    const reward = this.ddgd.step();\n    this.setState({reward: reward});\n    this.forceUpdate();\n  }\n\n  train = () => {\n    const length = this.lengthRef.current.value;\n    const exploration = this.explorationRef.current.value;\n    this.ddgd.learn(length, exploration);\n    this.ddgd.initializeExhibition();\n  }\n\n  render() {\n    return (\n      <div>\n        <SpaceDisplay ref={this.displayRef} circles={[this.simulator.a, this.simulator.b, this.simulator.c]} focusedOnCircle={this.simulator.c} fuelPercentage={this.simulator.c.fuel} reward={this.state.reward} />\n        <div>\n          <label>length\n            <input type=\"text\" defaultValue=\"500\" ref={this.lengthRef}/>\n          </label>\n          <label>exploration\n            <input type=\"text\" defaultValue=\"100\" ref={this.explorationRef} />\n          </label>\n          <input type=\"button\" value=\"TRAIN\" onClick={this.train} />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Ai\n"],"sourceRoot":""}